pipeline {
  agent any

  environment {
    ANDROID_HOME       = "/opt/android-sdk"
    PATH               = "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"

    // Isolate build-specific directories to support parallel execution
    BUILD_ROOT         = "/var/jenkins_home/builds/${BUILD_ID}"
    GRADLE_USER_HOME   = "${BUILD_ROOT}/.gradle"
    HOME               = "${BUILD_ROOT}/home"
    ANDROID_AVD_HOME   = "${BUILD_ROOT}/.android/avd"
    ADB_VENDOR_KEYS    = "${BUILD_ROOT}/.android/adbkey"

    // Dynamically assigned emulator port to avoid conflicts
    EMULATOR_PORT      = "${5560 + (BUILD_NUMBER.toInteger() % 40) * 2}"
    EMULATOR_SERIAL    = "emulator-${5560 + (BUILD_NUMBER.toInteger() % 40) * 2}"
    EMULATOR_NAME      = "jenkins_emulator"
    EMULATOR_LOG       = "emulator_${BUILD_ID}.log"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Prepare SDK & local.properties') {
      steps {
        sh '''
          mkdir -p "$ANDROID_AVD_HOME" "$GRADLE_USER_HOME" "$HOME/.android"
          echo "sdk.dir=$ANDROID_HOME" > local.properties
        '''
      }
    }

    stage('Start Emulator') {
      steps {
        sh '''
          echo "üöÄ Starting emulator with GPU passthrough..."

          rm -f "$HOME/.android/adbkey"*
          touch "$HOME/.android/adbkey" "$HOME/.android/adbkey.pub"

          start=$(date +%s)

          nohup $ANDROID_HOME/emulator/emulator -avd $EMULATOR_NAME \
            -port $EMULATOR_PORT \
            -no-audio -no-snapshot -wipe-data \
            -gpu host -no-boot-anim -no-window -accel on > $EMULATOR_LOG 2>&1 &

          echo "üîç Waiting for emulator to register via ADB..."
          for i in {1..30}; do
            adb devices | grep "$EMULATOR_SERIAL" && break
            sleep 2
          done

          echo "‚è≥ Waiting for system boot..."
          for i in {1..36}; do
            if adb -s $EMULATOR_SERIAL shell getprop sys.boot_completed | grep -q 1; then
              end=$(date +%s)
              echo "‚úÖ Boot completed in $((end - start)) seconds"
              break
            fi
            sleep 5
          done

          echo "üîì Unlocking emulator screen..."
          adb -s $EMULATOR_SERIAL shell input keyevent 82
          sleep 5

          echo "‚öôÔ∏è Disabling animations for faster test execution..."
          adb -s $EMULATOR_SERIAL shell settings put global window_animation_scale 0
          adb -s $EMULATOR_SERIAL shell settings put global transition_animation_scale 0
          adb -s $EMULATOR_SERIAL shell settings put global animator_duration_scale 0
        '''
      }
    }

    stage('Build APK') {
      steps {
        sh './gradlew assembleDebug'
      }
    }

    stage('Run UI Tests') {
      steps {
        sh '''
          export ANDROID_SERIAL=$EMULATOR_SERIAL
          echo "üß™ Executing connected tests..."
          ./gradlew connectedDebugAndroidTest
        '''
      }
    }

    stage('Archive Results') {
      steps {
        sh 'echo "üìÅ Searching for test result XMLs..."; find . -name "*.xml" || true'
        junit '**/build/outputs/**/connected/**/*.xml'
        archiveArtifacts artifacts: '**/build/outputs/**/*.apk', fingerprint: true
        archiveArtifacts artifacts: "$EMULATOR_LOG", allowEmptyArchive: true
      }
    }
  }

  post {
    always {
      echo "üõë Terminating emulator instance..."
      sh '''
        adb -s $EMULATOR_SERIAL emu kill || true
        pkill -f "emulator.*$EMULATOR_NAME" || true
        pkill -f "qemu-system" || true
      '''
    }
    success {
      echo "‚úÖ Pipeline finished successfully"
    }
    failure {
      echo "‚ùå Pipeline failed"
      sh 'echo "üìÑ Emulator log:"; cat $EMULATOR_LOG || true'
    }
  }
}
