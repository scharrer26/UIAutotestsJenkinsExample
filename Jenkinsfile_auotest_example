pipeline {
    agent any

    environment {
        ANDROID_HOME = "/opt/android-sdk"
        PATH = "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
        GRADLE_OPTS = "-Dorg.gradle.jvmargs=-Xmx4g"
        HOME = "/var/jenkins_home"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup local.properties') {
            steps {
                sh 'echo "sdk.dir=$ANDROID_HOME" > local.properties'
            }
        }

        stage('Start Emulator') {
            steps {
                sh '''
                    echo "üöÄ Starting emulator with xvfb..."

                    mkdir -p $HOME/.android
                    touch $HOME/.android/adbkey
                    touch $HOME/.android/adbkey.pub
                    chown -R jenkins:jenkins $HOME/.android || true

                    nohup xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" \
                        $ANDROID_HOME/emulator/emulator -avd jenkins_emulator \
                        -no-audio -no-snapshot -wipe-data \
                        -gpu off -accel off -no-boot-anim -no-auth > emulator.log 2>&1 &

                    echo "üîç Looking for started emulator ID..."
                    emulator_id=""
                    until [ -n "$emulator_id" ]; do
                        sleep 2
                        emulator_id=$(adb devices | grep -w "device" | grep "emulator-" | cut -f1)
                    done

                    echo "‚ÑπÔ∏è Using emulator: $emulator_id"
                    echo "$emulator_id" > emulator_id.txt

                    echo "‚è≥ Waiting for boot to complete..."
                    boot_completed=""
                    while [ "$boot_completed" != "1" ]; do
                        sleep 5
                        boot_completed=$(adb -s "$emulator_id" shell getprop sys.boot_completed | tr -d '\\r')
                        echo "‚è≥ Still booting..."
                    done

                    echo "‚úÖ Emulator $emulator_id is fully booted and ready!"

                    echo "üîì Unlocking screen (sending keyevent 82)..."
                    adb -s "$emulator_id" shell input keyevent 82

                    echo "‚è≥ Waiting a few extra seconds to stabilize the UI..."
                    sleep 5
                '''
            }
        }

        stage('Build APK') {
            steps {
                sh './gradlew assembleDebug'
            }
        }

        stage('Run Instrumented UI Tests') {
            steps {
                sh '''
                    emulator_id=$(cat emulator_id.txt)
                    echo "‚öôÔ∏è Setting ANDROID_SERIAL=$emulator_id"
                    export ANDROID_SERIAL=$emulator_id

                    echo "üîç Verifying emulator window has focus..."
                    max_tries=10
                    i=0
                    focused="false"
                    while [ "$focused" != "true" ] && [ $i -lt $max_tries ]; do
                        sleep 2
                        if adb -s "$emulator_id" shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp' | grep -q 'Activity'; then
                            focused="true"
                        else
                            echo "‚è≥ Waiting for focus... (try $((i+1)))"
                        fi
                        i=$((i + 1))
                    done

                    if [ "$focused" != "true" ]; then
                        echo "‚ö†Ô∏è Warning: Emulator may not have focus. Espresso tests might fail."
                    else
                        echo "‚úÖ Emulator window is focused."
                    fi

                    echo "üß™ Running Espresso tests..."
                    ./gradlew connectedDebugAndroidTest
                '''
            }
        }

        stage('Archive Test Results') {
            steps {
                junit '**/build/outputs/androidTest-results/connected/*.xml'
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build und UI-Tests erfolgreich"
        }
        failure {
            echo "‚ùå Build oder Tests fehlgeschlagen"
        }
        always {
            archiveArtifacts artifacts: '**/build/outputs/**/*.apk', fingerprint: true
            sh '''
                if [ -f emulator_id.txt ]; then
                    emulator_id=$(cat emulator_id.txt)
                    echo "üõë Stopping emulator $emulator_id"
                    adb -s "$emulator_id" emu kill || echo "‚ö†Ô∏è Failed to stop emulator (auth issue?)"
                fi
            '''
        }
    }
}
