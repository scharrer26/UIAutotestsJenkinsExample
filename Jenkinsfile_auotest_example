pipeline {
  agent any

  environment {
    ANDROID_HOME    = "/opt/android-sdk"
    PATH            = "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
    GRADLE_OPTS     = "-Dorg.gradle.jvmargs=-Xmx4g"
    HOME            = "/var/jenkins_home"
    ADB_VENDOR_KEYS = "/var/jenkins_home/.android/adbkey"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Setup local.properties') {
      steps {
        sh 'echo "sdk.dir=$ANDROID_HOME" > local.properties'
      }
    }

    stage('Start Emulator') {
      steps {
        sh '''
          echo "üöÄ Starting emulator in Xvfb..."
          mkdir -p $HOME/.android
          rm -f $HOME/.android/adbkey*
          touch $HOME/.android/adbkey $HOME/.android/adbkey.pub

          # Start emulator in headless mode using Xvfb
          nohup xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" \
            $ANDROID_HOME/emulator/emulator -avd jenkins_emulator \
            -no-audio -no-snapshot -wipe-data -gpu off -accel off -no-boot-anim -no-window \
            > emulator.log 2>&1 &

          # Wait for emulator to appear in `adb devices`
          echo "üîç Waiting for emulator to appear..."
          for i in {1..30}; do
            adb devices | awk '/emulator-.*device$/ {print $1}' && break
            sleep 2
          done

          # Wait for system boot to complete (max 180 seconds)
          echo "‚è≥ Waiting for boot completion (max 180s)..."
          for i in {1..36}; do
            if adb -s emulator-5554 shell getprop sys.boot_completed | grep -q 1; then
              echo "‚úÖ Emulator booted"
              break
            fi
            sleep 5
          done

          # Unlock the screen
          echo "üîì Unlocking screen..."
          adb -s emulator-5554 shell input keyevent 82
          sleep 10
        '''
      }
    }

    stage('Build APK') {
      steps {
        sh './gradlew assembleDebug'
      }
    }

    stage('Run Instrumented UI Tests') {
      steps {
        sh '''
          export ANDROID_SERIAL=emulator-5554
          echo "üß™ Running Espresso/UI Tests..."
          ./gradlew connectedDebugAndroidTest
        '''
      }
    }

    stage('Archive Test Results') {
      steps {
        // Print all found .xml files to help debugging test result collection
        sh 'echo "üìÇ Searching for test XML files..."; find . -name "*.xml" || true'

        // Use recursive pattern to catch all possible test result files
        junit '**/build/outputs/**/connected/**/*.xml'
      }
    }
  }
}