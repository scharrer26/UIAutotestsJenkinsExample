pipeline {
  agent any

  environment {
    ANDROID_HOME     = "/opt/android-sdk"
    PATH             = "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
    GRADLE_OPTS      = "-Dorg.gradle.jvmargs=-Xmx4g"
    GRADLE_USER_HOME = "/var/jenkins_home/.gradle"
    HOME             = "/var/jenkins_home"
    ADB_VENDOR_KEYS  = "$HOME/.android/adbkey"
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Setup local.properties') {
      steps {
        sh 'echo "sdk.dir=$ANDROID_HOME" > local.properties'
      }
    }

    stage('Ensure AVDs Exist') {
      steps {
        script {
          def avds = ['jenkins_emulator_34', 'jenkins_emulator_33', 'jenkins_emulator_32', 'jenkins_emulator_31', 'jenkins_emulator_30']
          avds.each { avd ->
            sh """
              echo "üì¶ Ensuring AVD $avd exists..."
              if ! $ANDROID_HOME/emulator/emulator -list-avds | grep -q $avd; then
                echo "üõ† Creating AVD $avd..."
                echo "no" | avdmanager create avd -n $avd \
                  -k "system-images;android-${avd.split('_')[2]};google_apis;x86_64" \
                  --device "pixel" --force
              else
                echo "‚úÖ AVD $avd already exists"
              fi
            """
          }
        }
      }
    }

    stage('Start Emulators') {
      steps {
        script {
          def emulators = ['jenkins_emulator_34', 'jenkins_emulator_33', 'jenkins_emulator_32', 'jenkins_emulator_31', 'jenkins_emulator_30']
          emulators.each { avd ->
            sh """
              echo "üöÄ Starting emulator $avd..."
              mkdir -p $HOME/.android
              rm -f $HOME/.android/adbkey*
              touch $HOME/.android/adbkey $HOME/.android/adbkey.pub

              start=$(date +%s)

              nohup $ANDROID_HOME/emulator/emulator -avd $avd \
                -no-audio -no-snapshot -wipe-data -gpu host \
                -no-boot-anim -no-window -accel on > "$WORKSPACE/${avd}_emulator.log" 2>&1 &
            """
          }
        }
      }
    }

    stage('Wait for Emulators to Boot') {
      steps {
        script {
          def emulators = ['jenkins_emulator_34', 'jenkins_emulator_33', 'jenkins_emulator_32', 'jenkins_emulator_31', 'jenkins_emulator_30']
          emulators.each { avd ->
            sh """
              echo "üîç Waiting for emulator $avd to appear in adb..."
              for i in {1..30}; do
                if adb devices | awk '/emulator-.*device$/ {print $1}'; then
                  break
                fi
                sleep 2
              done

              echo "‚è≥ Waiting for boot completion of $avd (max 180s)..."
              for i in {1..36}; do
                if adb -s emulator-5554 shell getprop sys.boot_completed | grep -q 1; then
                  end=$(date +%s)
                  echo "‚úÖ Emulator $avd booted in $((end - start)) seconds"
                  break
                fi
                sleep 5
              done

              echo "üîì Unlocking screen on emulator $avd..."
              adb -s emulator-5554 shell input keyevent 82
              sleep 5

              adb shell settings put global window_animation_scale 0
              adb shell settings put global transition_animation_scale 0
              adb shell settings put global animator_duration_scale 0
            """
          }
        }
      }
    }

    stage('Build APK') {
      steps {
        sh './gradlew assembleDebug'
      }
    }

    stage('Run Instrumented UI Tests') {
      steps {
        script {
          def devices = ['emulator-5554', 'emulator-5556', 'emulator-5558', 'emulator-5560', 'emulator-5562']
          devices.each { device ->
            sh """
              export ANDROID_SERIAL=$device
              echo "üß™ Running UI Tests on $device..."
              ./gradlew connectedDebugAndroidTest
            """
          }
        }
      }
    }

    stage('Archive Test Results') {
      steps {
        sh 'echo "üìÇ Listing test result files..."; find . -name "*.xml" || true'
        junit '**/build/outputs/**/connected/**/*.xml'
        archiveArtifacts artifacts: '**/build/outputs/**/*.apk', fingerprint: true
        archiveArtifacts artifacts: '**/emulator*.log', allowEmptyArchive: true
      }
    }
  }

  post {
    always {
      echo "üõë Stopping emulators..."
      sh '''
        adb -s emulator-5554 emu kill || true
        adb -s emulator-5556 emu kill || true
        adb -s emulator-5558 emu kill || true
        adb -s emulator-5560 emu kill || true
        adb -s emulator-5562 emu kill || true
        pkill -f "emulator.*jenkins_emulator" || true
        pkill -f "qemu-system-x86_64" || true
      '''
    }
    success {
      echo "‚úÖ Build and tests completed successfully"
    }
    failure {
      echo "‚ùå Build or tests failed"
      sh 'echo "üìÑ Dumping emulator log:"; cat "$WORKSPACE/emulator*.log" || true'
    }
  }
}
