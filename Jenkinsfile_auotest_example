pipeline {
    agent any

    environment {
        ANDROID_HOME   = "/opt/android-sdk"
        PATH           = "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
        GRADLE_OPTS    = "-Dorg.gradle.jvmargs=-Xmx4g"
        HOME           = "/var/jenkins_home"
        ADB_VENDOR_KEYS= "/var/jenkins_home/.android/adbkey"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup local.properties') {
            steps {
                sh 'echo "sdk.dir=$ANDROID_HOME" > local.properties'
            }
        }

        stage('Start Emulator') {
            steps {
                sh '''
                    echo "üöÄ Starting emulator with xvfb..."

                    mkdir -p $HOME/.android
                    rm -f $HOME/.android/adbkey*
                    touch $HOME/.android/adbkey $HOME/.android/adbkey.pub

                    nohup xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" \
                      $ANDROID_HOME/emulator/emulator -avd jenkins_emulator \
                      -no-audio -no-snapshot -wipe-data \
                      -gpu off -accel off -no-boot-anim -no-window \
                      > emulator.log 2>&1 &

                    echo "üîç Looking for started emulator ID..."
                    emulator_id=""
                    tries=0
                    until [ -n "$emulator_id" ] || [ $tries -gt 30 ]; do
                      sleep 2
                      emulator_id=$(adb devices | awk '/emulator-.*device$/ {print $1}')
                      tries=$((tries+1))
                    done

                    if [ -z "$emulator_id" ]; then
                      echo "‚ùå Emulator did not start in time"
                      cat emulator.log || true
                      exit 1
                    fi

                    echo "‚ÑπÔ∏è Using emulator: $emulator_id"
                    echo "$emulator_id" > emulator_id.txt

                    echo "‚è≥ Waiting for boot to complete (timeout 180s)..."
                    boot_completed=""
                    elapsed=0
                    while [ "$boot_completed" != "1" ] && [ $elapsed -lt 180 ]; do
                      sleep 5
                      elapsed=$((elapsed+5))
                      boot_completed=$(adb -s "$emulator_id" shell getprop sys.boot_completed | tr -d '\\r')
                      echo "‚è≥ Still booting... ($elapsed s)"
                    done

                    if [ "$boot_completed" != "1" ]; then
                      echo "‚ùå Emulator did not finish booting in time"
                      cat emulator.log || true
                      exit 1
                    fi

                    echo "‚úÖ Emulator booted."

                    echo "üéõÔ∏è Disabling animations..."
                    adb -s "$emulator_id" shell settings put global window_animation_scale 0
                    adb -s "$emulator_id" shell settings put global transition_animation_scale 0
                    adb -s "$emulator_id" shell settings put global animator_duration_scale 0

                    echo "üîì Unlocking screen..."
                    adb -s "$emulator_id" shell input keyevent 82

                    echo "‚è≥ Waiting 20s to stabilize UI..."
                    sleep 20
                '''
            }
        }

        stage('Build APK') {
            steps {
                sh './gradlew assembleDebug'
            }
        }

        stage('Run Instrumented UI Tests') {
            steps {
                sh '''
                    emulator_id=$(cat emulator_id.txt)
                    export ANDROID_SERIAL=$emulator_id

                    echo "üîç Verifying emulator window has focus..."
                    focused=false; tries=0
                    until $focused || [ $tries -ge 20 ]; do
                      sleep 4
                      if adb -s "$emulator_id" shell dumpsys window windows \
                        | grep -E 'mCurrentFocus|mFocusedApp' \
                        | grep -q 'Activity'; then
                        focused=true
                      else
                        echo "‚è≥ Waiting for focus... (try $((tries+1)))"
                        tries=$((tries+1))
                      fi
                    done

                    $focused || { echo "‚ùå No focus"; cat emulator.log || true; exit 1; }
                    echo "‚úÖ Emulator focused."

                    echo "üéØ Simulating user activity for sure focus..."
                    adb -s "$emulator_id" shell input keyevent 3
                    adb -s "$emulator_id" shell input keyevent 187
                    adb -s "$emulator_id" shell input keyevent 61
                    adb -s "$emulator_id" shell input keyevent 66
                    sleep 5

                    echo "üß™ Running Espresso tests..."
                    ./gradlew connectedDebugAndroidTest
                '''
            }
        }

        stage('Archive Test Results') {
            steps {
                junit '**/build/outputs/androidTest-results/connected/*.xml'
            }
        }
    }

    post {
        success { echo "‚úÖ Build und UI-Tests erfolgreich" }
        failure { echo "‚ùå Build oder Tests fehlgeschlagen" }
        always {
            archiveArtifacts artifacts: '**/build/outputs/**/*.apk', fingerprint: true
            archiveArtifacts artifacts: 'emulator.log', allowEmptyArchive: true

            // Emulator per PID killen
            script {
                def pid = sh(
                  script: "pgrep -f 'emulator.*jenkins_emulator'",
                  returnStdout: true
                ).trim()
                if (pid) {
                  echo "üõë Killing emulator process $pid"
                  sh "kill $pid"
                } else {
                  echo "‚ö†Ô∏è Emulator process not found"
                }
            }
        }
    }
}
